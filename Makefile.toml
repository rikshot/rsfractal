[env]
PORT = "8000"

[config]
skip_core_tasks = true

[tasks.debug]
description = "Build debug"
env = { RUSTFLAGS = "-C target-feature=+atomics,+bulk-memory" }
command = "cargo"
args = ["build", "--target", "wasm32-unknown-unknown", "-Z", "build-std=std,panic_abort"]

[tasks.debug-wasm]
description = "Generate debug wrapper"
dependencies = ["debug"]
command = "wasm-bindgen"
args = ["target/wasm32-unknown-unknown/debug/rsfractal.wasm", "--out-dir", "docs", "--no-modules", "--no-typescript"]

[tasks.release]
description = "Build release"
env = { RUSTFLAGS = "-C target-feature=+atomics,+bulk-memory" }
command = "cargo"
args = ["build", "--target", "wasm32-unknown-unknown", "-Z", "build-std=std,panic_abort", "--release"]

[tasks.release-wasm]
description = "Generate release wrapper"
command = "wasm-bindgen"
args = ["target/wasm32-unknown-unknown/release/rsfractal.wasm", "--out-dir", "docs", "--no-modules", "--no-typescript"]

[tasks.fix-wrapper]
description = "Fix missing typeof check for Window when running inside a Worker"
script = ["sed -i 's/getObject(arg0) instanceof Window/typeof Window !== \"undefined\" \\&\\& getObject(arg0) instanceof Window/' docs/rsfractal.js"]

[tasks.optimize-wasm]
description = "Optimize release WASM with wasm-opt"
dependencies = ["release"]
command = "wasm-opt"
args = ["-O4", "docs/rsfractal_bg.wasm", "-o", "docs/rsfractal_bg.wasm"]

[tasks.optimize-js]
description = "Optimize release JS with terser"
dependencies = ["release-wasm"]
command = "terser"
args = ["-c", "-m", "-o", "docs/rsfractal.js", "docs/rsfractal.js"]

[tasks.publish]
description = "Publish with optimizations"
dependencies = ["release", "release-wasm", "fix-wrapper", "optimize-wasm", "optimize-js"]

[tasks.watch]
description = "Build, create wasms, and watch/recompile files for changes"
workspace = false
dependencies = ["debug", "debug-wasm", "fix-wrapper"]
watch = { ignore_pattern="docs/*" }

[tasks.serve]
description = "Start server"
install_crate = { crate_name = "microserver", binary = "microserver", test_arg = "-h" }
workspace = false
command = "microserver"
args = ["--port", "${PORT}"]

[tasks.start]
description = "Combine the build and serve tasks"
workspace = false
dependencies = ["debug", "debug-wasm", "fix-wrapper", "serve"]